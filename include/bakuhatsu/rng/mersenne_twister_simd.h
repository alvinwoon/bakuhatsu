#ifndef BAKUHATSU_MERSENNE_TWISTER_SIMD_H
#define BAKUHATSU_MERSENNE_TWISTER_SIMD_H

#include "bakuhatsu/simd/neon_utils.h"
#include <stdint.h>

#ifdef __cplusplus
extern "C" {
#endif

/**
 * @file mersenne_twister_simd.h
 * @brief SIMD-optimized Mersenne Twister MT19937 implementation for parallel random number generation
 */

// MT19937 constants
#define MT_N 624
#define MT_M 397
#define MT_MATRIX_A 0x9908b0dfUL
#define MT_UPPER_MASK 0x80000000UL
#define MT_LOWER_MASK 0x7fffffffUL

/**
 * @brief Mersenne Twister state for single generator
 */
typedef struct {
    uint32_t mt[MT_N];           // State vector
    uint32_t mti;                // Index into mt[]
    uint64_t seed;               // Original seed for reproducibility
    uint64_t generated_count;    // Number of values generated
} mersenne_twister_state_t;

/**
 * @brief SIMD Mersenne Twister pool for parallel generation
 */
typedef struct {
    mersenne_twister_state_t* generators;  // Array of MT states
    uint32_t pool_size;                    // Number of generators
    uint32_t current_index;                // Round-robin index
    uint64_t total_generated;              // Total numbers generated
    
    // Performance optimization
    uint32_t* batch_buffer;                // Pre-generated batch buffer
    uint32_t batch_size;                   // Size of batch buffer
    uint32_t batch_position;               // Current position in batch
} simd_mt_pool_t;

/**
 * @brief Initialize single Mersenne Twister generator
 * @param mt Pointer to MT state
 * @param seed Initial seed
 */
void mt_init(mersenne_twister_state_t* mt, uint32_t seed);

/**
 * @brief Generate single 32-bit random number
 * @param mt Pointer to MT state
 * @return Random 32-bit unsigned integer
 */
uint32_t mt_genrand_uint32(mersenne_twister_state_t* mt);

/**
 * @brief Generate single random float in [0, 1)
 * @param mt Pointer to MT state
 * @return Random float in [0, 1)
 */
float mt_genrand_float(mersenne_twister_state_t* mt);

/**
 * @brief Create SIMD MT pool
 * @param pool_size Number of parallel generators
 * @param seed Base seed (each generator gets seed + index)
 * @return Pointer to MT pool or NULL on failure
 */
simd_mt_pool_t* simd_mt_pool_create(uint32_t pool_size, uint64_t seed);

/**
 * @brief Destroy SIMD MT pool
 * @param pool MT pool to destroy
 */
void simd_mt_pool_destroy(simd_mt_pool_t* pool);

/**
 * @brief Generate SIMD batch of 4 uniform floats [0, 1)
 * @param pool MT pool
 * @return SIMD vector with 4 random floats
 */
simd_f32x4_t simd_mt_generate_uniform_batch(simd_mt_pool_t* pool);

/**
 * @brief Generate SIMD batch of 4 uint32 values
 * @param pool MT pool
 * @return SIMD vector with 4 random uint32
 */
simd_u32x4_t simd_mt_generate_uint32_batch(simd_mt_pool_t* pool);

/**
 * @brief Generate large array of uniform floats using SIMD optimization
 * @param pool MT pool
 * @param output Output array (must be 16-byte aligned)
 * @param count Number of floats (must be multiple of 4)
 * @return Number of floats generated
 */
uint32_t simd_mt_generate_uniform_array(simd_mt_pool_t* pool, float* output, uint32_t count);

/**
 * @brief Advance all generators in pool by specified steps
 * @param pool MT pool
 * @param steps Number of steps to advance each generator
 */
void simd_mt_pool_advance(simd_mt_pool_t* pool, uint64_t steps);

/**
 * @brief Reseed MT pool with new base seed
 * @param pool MT pool
 * @param seed New base seed
 */
void simd_mt_pool_reseed(simd_mt_pool_t* pool, uint64_t seed);

/**
 * @brief Get total number of values generated by pool
 * @param pool MT pool
 * @return Total generation count
 */
uint64_t simd_mt_pool_get_count(const simd_mt_pool_t* pool);

/**
 * @brief Prefill batch buffer for improved performance
 * @param pool MT pool
 */
void simd_mt_pool_prefill_batch(simd_mt_pool_t* pool);

/**
 * @brief Check if generators need to be twisted (internal state refresh)
 * @param pool MT pool
 * @return Number of generators that need twisting
 */
uint32_t simd_mt_pool_check_twist_needed(const simd_mt_pool_t* pool);

/**
 * @brief Force twist operation on all generators
 * @param pool MT pool
 */
void simd_mt_pool_force_twist_all(simd_mt_pool_t* pool);

/**
 * @brief Generate batch with manual unroll for maximum performance
 * @param pool MT pool
 * @param batch_output Output for 16 floats (4x SIMD vectors)
 */
void simd_mt_generate_unrolled_batch(simd_mt_pool_t* pool, float* batch_output);

/**
 * @brief Validate MT pool state for debugging
 * @param pool MT pool
 * @return true if state is valid, false otherwise
 */
bool simd_mt_pool_validate_state(const simd_mt_pool_t* pool);

#ifdef __cplusplus
}
#endif

#endif // BAKUHATSU_MERSENNE_TWISTER_SIMD_H